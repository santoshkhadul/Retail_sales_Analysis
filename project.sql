--  TASK 1. CREATE DATABASE.
-- CREATE DATABASE RETAIL;

-- TASK 2. LOAD DATABASE/ MAKE USE IN DATABASE.
-- USE RETAIL;

-- TASK 3. CREATE TABLE FOR UPLOADING THE DATA.
-- CREATE TABLE RETAIL(
-- transactions_id	INT PRIMARY KEY,
-- sale_date DATE,
-- sale_time TIME,
-- customer_id	INT,
-- gender VARCHAR(50),
-- age	INT,
-- category VARCHAR(50),
-- quantiy	INT,
-- price_per_unit FLOAT,	
-- cogs FLOAT,
-- total_sale FLOAT
-- );

-- TASK 4. CHECK THE DATA IS UPLOADED OR NOT.
-- SELECT * FROM RETAIL;

-- TASK 5. GET THE TOTAL UMBER OF DATA WE HAVE.
-- SELECT COUNT(*) FROM RETAIL;

-- TASK 6. CHECK IF THERE IS NULL VALUES  IS PRESENT OR NOT.
-- SELECT * FROM RETAIL
-- WHERE TID IS NULL
-- or
-- SALE_DATE IS NULL
-- or
-- SALE_TIME IS NULL
-- OR
-- CUSTOMER_ID IS NULL
-- OR
-- GENDER IS NULL
-- or
-- AGE IS NULL
-- or
-- CATEGORY IS NULL
-- OR
-- QUANTITY IS NULL
-- OR
-- PRICE_PER_UNIT IS NULL
-- OR
-- COGS IS NULL
-- OR
-- TOTAL_SALE IS NULL;

-- TASK 7. DATA EXPLORATION  (HOW MANY SALES WE HAVE?)
-- SELECT COUNT(*) AS TOTAL_SALES FROM RETAIL;

-- TASK 8. HOW MANY UNIQUE CUSTOMERS WE HAVE?
-- SELECT COUNT(DISTINCT CUSTOMER_ID) FROM RETAIL;

-- TASK 9. HOW MANY UNIQUE CATEGORY WE HAVE?
-- SELECT COUNT(DISTINCT CATEGORY) FROM RETAIL;
-- ------------------------------------------------------------------------------------------------------------------------------------------------------
-- DATA ANALYSIS ANS BUSINESS KEY PROBLEMS AND ANSWERS.

-- Q1. WRITE A SQL QUERY TO RETRIVE ALL COLUMNS FOR SALES MADE ON 2022-11-05.
-- SELECT * FROM RETAIL
-- WHERE SALE_DATE = '2022-11-05';

-- Q2. WRITE A SQL QUERY TO RETRIVE ALL THE TRANSACTION WHERE THE CATEGORY IS 'CLOTHING' AND THE QUANTITY IS SOLD MORE THAN 4 IN THE MONTH OF NOV-2022.
-- SELECT * FROM RETAIL
-- WHERE CATEGORY = 'Clothing' AND CHAR(SALE_DATE, 'YYYY-MM') = 2022-11
-- AND QUANTITY >= 4;

-- Q3. WRITE A SQL QUERY TO CALCULATE THE TOTAL SALES (TOTAL_SALES) FOR EACH CATEGORY.
-- SELECT CATEGORY, SUM(TOTAL_SALE) AS NET_SALES, COUNT(*)
--  FROM RETAIL
-- GROUP BY 1;

-- Q4. WRITE A SQL QUERY TO FIND FIND THE AVERAGE AGE OF CUSTOMERS WHO PURCHASED ITEMS FROM THE 'BEAUTY' CATEGORY.
-- SELECT ROUND(AVG(AGE)) FROM RETAIL
-- WHERE CATEGORY = 'Beauty';

-- Q5. WRITE A SQL QUERY TO FIND ALL TRANACTION WHERE THE TOTAL_SALE IS GREATER THAN 1000.
-- SELECT * FROM RETAIL
-- WHERE TOTAL_SALE >= 1000;

-- Q6. WRITE A SQL QUERY TO FINND THE TOTAL NUMBER OF TRANSACTION (TRANSACTION_ID) MADE BY EACH GENDER IN EACH CATEGORY.
-- SELECT CATEGORY, GENDER, COUNT(*) FROM RETAIL
-- GROUP BY CATEGORY, GENDER;

-- Q7. WRITE A SQL QUERY TO calculate the  average sale for each each month, find out the best selling month in each year.
-- SELECT YEAR, MONTH, AVERAGE_TOTAL_SALE 
-- FROM 
-- (
-- 	SELECT 
-- 		YEAR(SALE_DATE) AS YEAR,
-- 		MONTH(SALE_DATE) AS MONTH,
-- 		ROUND(AVG(TOTAL_SALE)) AS AVERAGE_TOTAL_SALE,
-- 		RANK() OVER (PARTITION BY YEAR(SALE_DATE) ORDER BY AVG(TOTAL_SALE) DESC) AS RANK_M
-- 	FROM RETAIL
-- 	GROUP BY YEAR(SALE_DATE), MONTH(SALE_DATE)
-- ) AS T1
-- WHERE RANK_M = 1;

-- Q8. WRITE A SQL QUERY TO FIND THE TOP 5 CUSTOMERS BASED ON THE HIGHEST TOTAL SALES.
-- SELECT CUSTOMER_ID, SUM(TOTAL_SALE) AS TOTAL_SALES
-- FROM RETAIL
-- GROUP BY CUSTOMER_ID,TOTAL_SALE
-- ORDER BY TOTAL_SALE DESC
-- LIMIT 5;

-- Q9. WRITE A SQL QUERY TO FIND THE NUMBER OF UNIQUE CUSTOMERS WHO PURCHASED ITEMS FROM EACH CATEGORY.
-- SELECT CATEGORY, COUNT(DISTINCT(CUSTOMER_ID)) AS UNIQUE_CUSTOMERS
-- FROM RETAIL
-- GROUP BY CATEGORY;

-- Q10. WRITE A SQL QUERY TO CREATE EACH SHIFT AND NUMBER OF ORDERS (EXAMPLE MORNING <=12, AFTERNOON BETWEEN 12 & 17 EVENING >17).
-- WITH HOURLY_SALES AS
-- (SELECT *,
-- 	CASE
-- 		WHEN hour(SALE_TIME) < 12 THEN 'MORNING'
--         WHEN hour(SALE_TIME) < 12 BETWEEN 12 AND 17 THEN 'AFTERNOOON' 
-- 		ELSE 'EVENING'
-- 	END AS SHIFT
-- FROM RETAIL
-- )
-- SELECT SHIFT, COUNT(*)
-- FROM HOURLY_SALES AS TOTAL_ORDERS
-- GROUP BY SHIFT;

-- -----------------------------------------------------------------------END OF PROJECT ---------------------------------------------------------------------------------